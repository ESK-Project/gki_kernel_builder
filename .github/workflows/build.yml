name: Kernel Builder
permissions:
  contents: write
  actions: write

on:
  workflow_call:
    inputs:
      KSU:
        type: string
        required: true
      SUSFS:
        type: string
        required: true
      LXC:
        type: string
        required: true
      VERBOSE:
        type: string
        required: true
      NOTIFY:
        type: string
        required: true

    outputs:
      output:
        description: 'Output directory'
        value: ${{ jobs.build.outputs.output }}
      version:
        description: 'Kernel version'
        value: ${{ jobs.build.outputs.version }}
      variant:
        description: 'Variant suffix'
        value: ${{ jobs.build.outputs.variant }}
      susfs_version:
        description: 'SUSFS version'
        value: ${{ jobs.build.outputs.susfs_version }}
      ksu_version:
        description: 'KernelSU version'
        value: ${{ jobs.build.outputs.ksu_version }}
      toolchain:
        description: 'Toolchain version'
        value: ${{ jobs.build.outputs.toolchain }}
      build_time:
        description: 'Build timestamp'
        value: ${{ jobs.build.outputs.build_time }}
      release_repo:
        description: 'Release repo'
        value: ${{ jobs.build.outputs.release_repo }}
      release_branch:
        description: 'Release branch'
        value: ${{ jobs.build.outputs.release_branch }}
      kernel_name:
        description: 'Kernel name'
        value: ${{ jobs.build.outputs.kernel_name }}

  workflow_dispatch:
    inputs:
      KSU:
        description: "KernelSU variant"
        default: "NONE"
        type: choice
        options: ["NONE", "NEXT", "SUKI"]

      SUSFS:
        description: "Enable SUSFS"
        default: "false"
        type: choice
        options: ["false", "true"]

      LXC:
        description: "Enable LXC"
        default: "false"
        type: choice
        options: ["false", "true"]

      VERBOSE:
        description: "Enable verbose output"
        default: "false"
        type: choice
        options: ["false", "true"]

      NOTIFY:
        description: "Notify build on Telegram"
        default: "true"
        type: choice
        options: ["false", "true"]

env:
  DEBIAN_FRONTEND: noninteractive
  FORCE_COLOR: "1"
  TTY_COMPATIBLE: "1"
  TERM: xterm-256color

jobs:
  build:
    runs-on: ubuntu-latest

    outputs:
      output:         ${{ steps.import_env.outputs.output }}
      version:        ${{ steps.import_env.outputs.version }}
      variant:        ${{ steps.import_env.outputs.variant }}
      susfs_version:  ${{ steps.import_env.outputs.susfs_version }}
      ksu_version:    ${{ steps.import_env.outputs.ksu_version }}
      toolchain:      ${{ steps.import_env.outputs.toolchain }}
      build_time:     ${{ steps.import_env.outputs.build_time }}
      release_repo:   ${{ steps.import_env.outputs.release_repo }}
      release_branch: ${{ steps.import_env.outputs.release_branch }}
      kernel_name:    ${{ steps.import_env.outputs.kernel_name }}

    env:
        TG_CHAT_ID:   ${{ secrets.TG_CHAT_ID }}
        TG_BOT_TOKEN: ${{ secrets.TG_BOT_TOKEN }}
        GH_TOKEN:     ${{ secrets.GH_TOKEN }}
    steps:
      - name: Fail SUSFS requirement check
        if: ${{ inputs.SUSFS == 'true' && inputs.KSU == 'NONE' }}
        run: |
          echo "Cannot use SUSFS without KernelSU"
          exit 1

      - name: Checkout code & init submodules
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          submodules: true

      - name: astral-sh/setup-uv
        uses: astral-sh/setup-uv@v6.4.1
        with:
          python-version: '3.12'
          enable-cache: true
          cache-suffix: "gki-builder"
          cache-dependency-glob: |
            **/pyproject.toml
            **/uv.lock

      - name: Create venv & Install dependencies
        run: |
          sudo apt update -qq
          sudo apt install -qq bc bison ccache curl flex git tar wget aria2

          uv venv
          uv sync --frozen --no-install-project

      - name: Build
        env:
          KSU:   ${{ inputs.KSU }}
          SUSFS: ${{ inputs.SUSFS }}
          LXC:   ${{ inputs.LXC }}
          VERBOSE_OUTPUT: ${{ inputs.VERBOSE }}
        run: |
          uv run cli.py build

      - name: Import exported environment
        id: import_env
        run: |
          # ====== build github env table:
          # output          Output directory
          # version         Kernel version
          # variant         Variant suffix
          # susfs_version   SUSFS version
          # ksu_version     KernelSU version
          # toolchain       Toolchain version
          # build_time      Build timestamp
          # release_repo    Release repo
          # release_branch  Release branch
          # kernel_name     Kernel name

          ENV_FILE="$GITHUB_WORKSPACE/github.env"
          [[ -f "$ENV_FILE" ]] || { echo "::error::$ENV_FILE missing"; exit 1; }
          while IFS='=' read -r key value; do
            # Ignore empty lines
            [[ -z "$key" || "$key" == \#* ]] && continue

            # Strip leading and trailing whitespace
            key=$(echo "$key" | xargs)
            value=$(echo "$value" | xargs)

            # Strip ' ' from string
            value=${value//\'/}

            # Validate key and value
            if [[ -n "$key" && -n "$value" ]]; then
              echo "$key=$value"
              echo "$key=$value" >> "$GITHUB_ENV"
              echo "$key=$value" >> "$GITHUB_OUTPUT"
            fi
          done < $ENV_FILE

      - name: Upload final artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.kernel_name }}${{ env.variant }}
          path: |
            ${{ env.output }}/${{ env.kernel_name }}-${{ env.version }}${{ env.variant }}-AnyKernel3.zip
            ${{ env.output }}/${{ env.kernel_name }}-${{ env.version }}${{ env.variant }}-boot.img

      - name: Notify Telegram
        if: ${{ inputs.NOTIFY == 'true' }}
        env:
          VERSION:           ${{ env.version }}
          BUILD_DATE:        ${{ env.build_time }}
          KSU_VARIANT:       ${{ inputs.KSU }}
          LXC:               ${{ inputs.LXC }}
          SUSFS_VERSION:     ${{ env.susfs_version }}
          KSU_VERSION:       ${{ env.ksu_version }}
          TOOLCHAIN:         ${{ env.toolchain }}
          KERNEL_NAME:       ${{ env.kernel_name }}
          GITHUB_SERVER_URL: ${{ github.server_url }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_RUN_ID:     ${{ github.run_id }}
        run: |
          RUN_LINK="$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID"
          MESSAGE=$(cat <<EOF
          $KERNEL_NAME Kernel CI

          🐧 *Linux Version*: $VERSION
          📅 *Build Date*: $BUILD_DATE
          🔰 *KernelSU*: $KSU_VARIANT | $KSU_VERSION
          🎭 *SUSFS*: $SUSFS_VERSION
          📦 *LXC*: $([ "$LXC" = "true" ] && echo "Included" || echo "Disabled")
          🛠️*Toolchain*: $TOOLCHAIN

          [Workflow Run]($RUN_LINK)
          #ci\_$GITHUB_RUN_ID
          EOF
          )

          curl -s -X POST "https://api.telegram.org/bot${TG_BOT_TOKEN}/sendMessage" \
            -d chat_id="${TG_CHAT_ID}" \
            -d disable_web_page_preview=true \
            -d parse_mode=Markdown \
            -d "text=${MESSAGE}"
