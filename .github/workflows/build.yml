name: Kernel Builder
permissions:
  contents: write
  actions: write

on:
  workflow_call:
    inputs:
      KSU:
        type: string
        required: true
      SUSFS:
        type: string
        required: true
      LXC:
        type: string
        required: true
      VERBOSE:
        type: string
        required: true
      NOTIFY:
        type: string
        required: true

  workflow_dispatch:
    inputs:
      KSU:
        description: "KernelSU variant"
        default: "NONE"
        type: choice
        options: ["NONE", "NEXT", "SUKI"]

      SUSFS:
        description: "Enable SUSFS"
        default: "false"
        type: choice
        options: ["false", "true"]

      LXC:
        description: "Enable LXC"
        default: "false"
        type: choice
        options: ["false", "true"]

      VERBOSE:
        description: "Enable verbose output"
        default: "false"
        type: choice
        options: ["false", "true"]

      NOTIFY:
        description: "Notify build on Telegram"
        default: "true"
        type: choice
        options: ["false", "true"]

env:
  DEBIAN_FRONTEND: noninteractive
  FORCE_COLOR: "1"
  TTY_COMPATIBLE: "1"
  TERM: xterm-256color

jobs:
  default:
    runs-on: ubuntu-latest
    env:
        TG_CHAT_ID: ${{ secrets.TG_CHAT_ID }}
        TG_BOT_TOKEN: ${{ secrets.TG_BOT_TOKEN }}
        GH_TOKEN: ${{ secrets.GH_TOKEN }}
    steps:
      - name: Fail SUSFS requirement check
        if: ${{ inputs.SUSFS == 'true' && inputs.KSU == 'NONE' }}
        run: |
          echo "Cannot use SUSFS without KernelSU"
          exit 1

      - name: Checkout code & init submodules
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: astral-sh/setup-uv
        uses: astral-sh/setup-uv@v6.3.1
        with:
          python-version: '3.12'
          enable-cache: true
          cache-suffix: "gki-builder"
          cache-dependency-glob: |
            **/pyproject.toml
            **/uv.lock

      - name: Create venv & Install dependencies
        run: |
          sudo apt update -qq
          sudo apt install -qq bc bison ccache curl flex git tar wget aria2

          uv venv
          uv sync --frozen --no-install-project

      - name: Build
        id: build
        env:
          KSU: ${{ inputs.KSU }}
          SUSFS: ${{ inputs.SUSFS }}
          LXC: ${{ inputs.LXC }}
          VERBOSE_OUTPUT: ${{ inputs.VERBOSE }}
        run: |
          # ====== build github outputs table:
          # output          Output directory
          # version         Kernel version
          # variant         Variant suffix
          # susfs_version   SUSFS version
          # toolchain       Toolchain version
          # build_time      Build timestamp

          uv run run.py

      - name: Upload final artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ESK${{ steps.build.outputs.variant }}
          path: |
            ${{ steps.build.outputs.output }}/ESK-${{ steps.build.outputs.version }}${{ steps.build.outputs.variant }}-AnyKernel3.zip
            ${{ steps.build.outputs.output }}/ESK-${{ steps.build.outputs.version }}${{ steps.build.outputs.variant }}-boot.img

      - name: Notify Telegram
        if: ${{ inputs.NOTIFY == 'true' }}
        env:
          VERSION: ${{ steps.build.outputs.version }}
          BUILD_DATE: ${{ steps.build.outputs.build_time }}
          KSU_VARIANT: ${{ inputs.KSU }}
          LXC: ${{ inputs.LXC }}
          SUSFS_VERSION: ${{ steps.build.outputs.susfs_version }}
          TOOLCHAIN: ${{ steps.build.outputs.toolchain }}
        run: |
          MESSAGE=$(cat <<EOF
          *==== Kernel CI ====*
          *Linux Version*: "$VERSION"
          *Build Date*: "$BUILD_DATE"
          *KernelSU*: "$KSU_VARIANT"
          *SUSFS*: "$SUSFS_VERSION"
          *LXC*: $([ "$LXC" = "true" ] && echo "Included" || echo "Disabled")
          *Toolchain*: "$TOOLCHAIN"
          EOF
          )

          curl -s -X POST "https://api.telegram.org/bot${TG_BOT_TOKEN}/sendMessage" \
            -d chat_id="${TG_CHAT_ID}" \
            -d disable_web_page_preview=true \
            -d parse_mode=Markdown \
            -d "text=${MESSAGE}"
